mod_summary
cat("Data scale intercept is: ", exp(mod_summary$coefficients[1, 1]), ".\n", sep = "")
cat("Data scale slope is: ", exp(mod_summary$coefficients[2, 1]), ".", sep = "")
# hear
at_160 <- exp(mod_summary$coefficients[1, 1] + mod_summary$coefficients[2, 1] * 160)
at_180 <- exp(mod_summary$coefficients[1, 1] + mod_summary$coefficients[2, 1] * 180)
cat("Predicted heart rate at 160cm:", at_160, "\n")
cat("And there's a", at_160 / at_180, "higher heart rate at 160cm than at 180cm\n")
# hear
at_160 <- exp(mod_summary$coefficients[1, 1] + mod_summary$coefficients[2, 1] * 160)
at_180 <- exp(mod_summary$coefficients[1, 1] + mod_summary$coefficients[2, 1] * 180)
cat("Predicted heart rate at 160cm:", at_160, "\n")
cat("And there's a", at_160 / at_180, "x higher heart rate at 160cm than at 180cm\n")
# interpolate within the bounds of our data
min_height <- min(d$X5_Height_in_cm)
max_height <- max(d$X5_Height_in_cm)
# 1000 data points to simulate
new_x <- expand.grid(
X5_Height_in_cm = seq(min_height, max_height, length = 1000)
)
# and predict the y using the `predict` function
# se.fit to get the confidence intervals
new_y <- as.data.frame(predict(mod, newdata = new_x, se.fit = TRUE))
# modify the new data frame
new_d <- data.frame(new_x, new_y)
# in particular we need to exponentiate, as poisson
# is a log link scale
new_d$fit_exp <- exp(new_d$fit)
# 95% of the area under the normal distribution lies within
# 1.96 standard deviations away from the mean.
new_d$lwr <- exp(new_d$fit - 1.96 * new_d$se.fit)
new_d$upr <- exp(new_d$fit + 1.96 * new_d$se.fit)
head(new_d)
plot(d$X5_Height_in_cm, d$X19_Heart_rate_bpm_me)
polygon( x = c(new_d$X5_Height_in_cm,  rev(new_d$X5_Height_in_cm) ),
c(new_d$lwr, rev(new_d$upr)), col = alpha("red", 0.2), border = NA)
# add the lines
lines(new_d$X5_Height_in_cm, new_d$fit_exp)
lines(new_d$X5_Height_in_cm, new_d$lwr)
lines(new_d$X5_Height_in_cm, new_d$upr)
plot(d$X5_Height_in_cm, d$X19_Heart_rate_bpm_me, xlab = "Height (cm)", ylab = "Heart rate (bpm)")
polygon( x = c(new_d$X5_Height_in_cm,  rev(new_d$X5_Height_in_cm) ),
c(new_d$lwr, rev(new_d$upr)), col = alpha("red", 0.2), border = NA)
# add the lines
lines(new_d$X5_Height_in_cm, new_d$fit_exp)
lines(new_d$X5_Height_in_cm, new_d$lwr)
lines(new_d$X5_Height_in_cm, new_d$upr)
d <- read.csv("https://raw.githubusercontent.com/ARU-life-sciences/bioinformatics/main/R/statistics/data/form-1__anthropometrics.csv")
# save the model. Here, we're modelling heart rate as a function of height of the person
mod <- glm(X19_Heart_rate_bpm_me ~ X5_Height_in_cm, family = "poisson", data = d)
mod_summary <- summary(mod)
mod_summary
cat("Data scale intercept is: ", exp(mod_summary$coefficients[1, 1]), ".\n", sep = "")
cat("Data scale slope is: ", exp(mod_summary$coefficients[2, 1]), ".", sep = "")
# hear
at_160 <- exp(mod_summary$coefficients[1, 1] + mod_summary$coefficients[2, 1] * 160)
at_180 <- exp(mod_summary$coefficients[1, 1] + mod_summary$coefficients[2, 1] * 180)
cat("Predicted heart rate at 160cm:", at_160, "\n")
cat("And there's a", at_160 / at_180, "x higher heart rate at 160cm than at 180cm\n")
# interpolate within the bounds of our data
min_height <- min(d$X5_Height_in_cm)
max_height <- max(d$X5_Height_in_cm)
# 1000 data points to simulate
new_x <- expand.grid(
X5_Height_in_cm = seq(min_height, max_height, length = 1000)
)
# and predict the y using the `predict` function
# se.fit to get the confidence intervals
new_y <- as.data.frame(predict(mod, newdata = new_x, se.fit = TRUE))
# modify the new data frame
new_d <- data.frame(new_x, new_y)
# in particular we need to exponentiate, as poisson
# is a log link scale
new_d$fit_exp <- exp(new_d$fit)
# 95% of the area under the normal distribution lies within
# 1.96 standard deviations away from the mean.
new_d$lwr <- exp(new_d$fit - 1.96 * new_d$se.fit)
new_d$upr <- exp(new_d$fit + 1.96 * new_d$se.fit)
head(new_d)
plot(d$X5_Height_in_cm, d$X19_Heart_rate_bpm_me, xlab = "Height (cm)", ylab = "Heart rate (bpm)")
polygon( x = c(new_d$X5_Height_in_cm,  rev(new_d$X5_Height_in_cm) ),
c(new_d$lwr, rev(new_d$upr)), col = alpha("red", 0.2), border = NA)
# add the lines
lines(new_d$X5_Height_in_cm, new_d$fit_exp)
lines(new_d$X5_Height_in_cm, new_d$lwr)
lines(new_d$X5_Height_in_cm, new_d$upr)
new_d
head(new_d)
new_d[, c("X5_Height_in_cm", "fit_exp", "lwr", "upr")]
head(new_d[, c("X5_Height_in_cm", "fit_exp", "lwr", "upr")])
# now export data
write.csv(
x = new_d[, c("X5_Height_in_cm", "fit_exp", "lwr", "upr")],
file = "./data/poisson.csv"
)
# now export data
write.csv(
x = new_d[, c("X5_Height_in_cm", "fit_exp", "lwr", "upr")],
file = "./data/poisson.csv", row.names = NULL
)
# now export data
write.csv(
x = new_d[, c("X5_Height_in_cm", "fit_exp", "lwr", "upr")],
file = "./data/poisson.csv"
)
new_d[, c("X5_Height_in_cm", "fit_exp", "lwr", "upr")]
head(new_d[, c("X5_Height_in_cm", "fit_exp", "lwr", "upr")])
cbind(d$X5_Height_in_cm, d$X19_Heart_rate_bpm_me)
head(new_d[, c("X5_Height_in_cm", "fit_exp", "lwr", "upr")])
install.packages("vcfR")
library(vcfR)
vignette('vcf_data')
install.packages('adegenet')
library(tidypopgen)
library(vcfR)
install.packages("bigsnpr")
install.packages("bigstatsr")
install.packages("genio")
library(tidypopgen)
tidypopgen::read_plink_raw("~/Documents/software/tidypopgen/inst/extdata/pop_a.bim")
tidypopgen::read_plink_raw("~/Documents/software/tidypopgen/inst/extdata/pop_a.raw")
rpr <- tidypopgen::read_plink_raw("~/Documents/software/tidypopgen/inst/extdata/pop_a.raw")
str(rpr)
rpr2 <- vcfR::read.vcfR("~/Documents/software/tidypopgen/inst/extdata/anolis/punctatus_t70_s10_n46_filtered.recode.vcf.gz")
tidypopgen::as_gen_tibble(rpr2)
rpr <- tidypopgen::read_plink_raw("~/Documents/software/tidypopgen/inst/extdata/pop_a.raw")
rpr2 <- vcfR::read.vcfR("~/Documents/software/tidypopgen/inst/extdata/anolis/punctatus_t70_s10_n46_filtered.recode.vcf.gz")
?read_plink_raw
read_vcf_raw <- function(file,
quiet = TRUE
...) {
read_vcf_raw("~/Documents/software/tidypopgen/inst/extdata/anolis/punctatus_t70_s10_n46_filtered.recode.vcf.gz")
read_vcf_raw <- function(file,
quiet = TRUE
...) {
read_vcf_raw <- function(file,
quiet = TRUE,
...) {
inner_vcf <- vcfR::read.vcfR(file = file, verbose = !quiet, ...)
as_gen_tibble(inner_vcf)
}
read_vcf_raw("~/Documents/software/tidypopgen/inst/extdata/anolis/punctatus_t70_s10_n46_filtered.recode.vcf.gz")
rmarkdown::render(input = "~/Documents/ARU/ARU-life-sciences/bioinformatics/R/programming/1_variables_datatypes_classes/data_types.Rmd", output_format = "html_document", output_file = "~/Documents/ARU/ARU-life-sciences/bioinformatics/R/programming/1_variables_datatypes_classes/htmls/data_types.html")
install.packages(c('Rcpp', 'RcppArmadillo'))
getwd()
setwd("~/Documents/ARU/ARU-life-sciences/coding_club/data/")
# Load the data
geckos <- read.csv("./Szabo_2024_geckos.csv")
geckos
# Load the data
geckos <- read.csv("./Szabo_2024_geckos.csv", check.names = FALSE)
geckos
geckos[5:nrow(geckos)]
geckos[5:nrow(geckos),]
split(x = geckos[5:nrow(geckos),], f = geckos$ID)
str(split(x = geckos[5:nrow(geckos),], f = geckos$ID))
geckos$ID
unique(geckos$ID)
length(unique(geckos$ID))
length(unique(geckos$ID)) - 1
split(x = geckos[5:nrow(geckos),], f = geckos$ID)
str(per_id)
per_id <- split(x = geckos[5:nrow(geckos),], f = geckos$ID)
str(per_id)
lapply(per_id, t)
str(lapply(per_id, t))
str(lapply(per_id, t)[[1]])
str(lapply(per_id, function(d) as.data.fram(t(d)))[[1]])
str(lapply(per_id, function(d) as.data.frame(t(d)))[[1]])
lapply(per_id, function(d) as.data.frame(t(d)))[[1]]
per_id[[1]]
str(per_id[[1]])
id1 <- per_id[[1]]
id1
t(id1)
as.data.frame(t(id1))
d_id1 <- as.data.frame(t(id1))
d_id1
colnames(d_id1)
rownames(d_id1) == "Date"
colnames(d_id1) <- d_id1[rownames(d_id1) == "Date", ]
colnames(d_id1)
d_id1
d_id1[rownames(d_id1) == "Date", ] <- NULL
d_id1[rownames(d_id1) == "Date", ]
d_id1[-rownames(d_id1) == "Date", ]
d_id1[!rownames(d_id1) == "Date", ]
id1
as.data.frame(t(id1))
per_id
id1 <- per_id[["1"]]
id1
as.data.frame(t(id1))
# Load the data
geckos <- read.csv("./Szabo_2024_geckos.csv", check.names = FALSE)
geckos$ID <- as.factor(geckos$ID)
per_id <- split(x = geckos[5:nrow(geckos),], f = geckos$ID)
per_id
id1 <- per_id[["1"]]
d_id1 <- as.data.frame(t(id1))
d_id1
geckos$ID
geckos
per_id <- split(x = geckos[5:nrow(geckos), -c(1:4)], f = geckos$ID)
id1 <- per_id[["1"]]
d_id1 <- as.data.frame(t(id1))
d_id1
id1 <- per_id[["2"]]
id1
d_id1 <- as.data.frame(t(id1))
d_id1
colnames(d_id1) <- d_id1[rownames(d_id1) == "Date", ]
d_id1 <- d_id1[!rownames(d_id1) == "Date", ]
d_id1
rownames(d_id1) <- gsub("\.*", "", rownames(d_id1))
rownames(d_id1) <- gsub("\\.*", "", rownames(d_id1))
d_id1
id1 <- per_id[["2"]]
d_id1 <- as.data.frame(t(id1))
colnames(d_id1) <- d_id1[rownames(d_id1) == "Date", ]
d_id1 <- d_id1[!rownames(d_id1) == "Date", ]
d_id1
gsub("\\.*", "", rownames(d_id1))
rownames(d_id1) <- gsub("\\..*", "", rownames(d_id1))
id1 <- per_id[["2"]]
d_id1 <- as.data.frame(t(id1))
colnames(d_id1) <- d_id1[rownames(d_id1) == "Date", ]
d_id1 <- d_id1[!rownames(d_id1) == "Date", ]
rownames(d_id1) <- gsub("\\..*", "", rownames(d_id1))
d_id1
d_id1$Date <- gsub("\\..*", "", rownames(d_id1))
d_id1
rownames(d_id1) <- NULL
d_id1
lapply(per_id, function(d) {
dd <- as.data.frame(t(d))
colnames(dd) <- dd[rownames(dd) == "Date", ]
dd <- dd[!rownames(dd) == "Date", ]
dd$Date <- gsub("\\..*", "", rownames(dd))
rownames(dd) <- NULL
})
lapply(per_id, function(d) {
head(d)
dd <- as.data.frame(t(d))
colnames(dd) <- dd[rownames(dd) == "Date", ]
dd <- dd[!rownames(dd) == "Date", ]
dd$Date <- gsub("\\..*", "", rownames(dd))
rownames(dd) <- NULL
})
lapply(per_id, function(d) {
print(head(d))
dd <- as.data.frame(t(d))
colnames(dd) <- dd[rownames(dd) == "Date", ]
dd <- dd[!rownames(dd) == "Date", ]
dd$Date <- gsub("\\..*", "", rownames(dd))
rownames(dd) <- NULL
})
lapply(per_id, function(d) {
dd <- as.data.frame(t(d))
print(head(dd))
colnames(dd) <- dd[rownames(dd) == "Date", ]
dd <- dd[!rownames(dd) == "Date", ]
dd$Date <- gsub("\\..*", "", rownames(dd))
rownames(dd) <- NULL
})
lapply(per_id, function(d) {
dd <- as.data.frame(t(d))
colnames(dd) <- dd[rownames(dd) == "Date", ]
dd <- dd[!rownames(dd) == "Date", ]
print(head(dd))
dd$Date <- gsub("\\..*", "", rownames(dd))
rownames(dd) <- NULL
})
lapply(per_id, function(d) {
dd <- as.data.frame(t(d))
colnames(dd) <- dd[rownames(dd) == "Date", ]
dd <- dd[!rownames(dd) == "Date", ]
dd$Date <- gsub("\\..*", "", rownames(dd))
rownames(dd) <- NULL
print(head(dd))
})
lapply(per_id, function(d) {
dd <- as.data.frame(t(d))
colnames(dd) <- dd[rownames(dd) == "Date", ]
dd <- dd[!rownames(dd) == "Date", ]
dd$Date <- gsub("\\..*", "", rownames(dd))
rownames(dd) <- NULL
dd
})
gecko_data <- lapply(per_id, function(d) {
dd <- as.data.frame(t(d))
colnames(dd) <- dd[rownames(dd) == "Date", ]
dd <- dd[!rownames(dd) == "Date", ]
dd$Date <- gsub("\\..*", "", rownames(dd))
rownames(dd) <- NULL
dd
})
gecko_data
geckos
geckos[, c(1:4)]
unique(geckos[, c(1:4)])
complete.cases(unique(geckos[, c(1:4)]))
unique(geckos[, c(1:4)])[complete.cases(unique(geckos[, c(1:4)]))]
unique(geckos[, c(1:4)])[complete.cases(unique(geckos[, c(1:4)])), ]
id_svl_weight_sex <- unique(geckos[, c(1:4)])[complete.cases(unique(geckos[, c(1:4)])), ]
id_svl_weight_sex
str(gecko_data)
id_svl_weight_sex
id_svl_weight_sex <- id_svl_weight_sex[order(id_svl_weight_sex$ID), ]
id_svl_weight_sex
str(gecko_data)
id_svl_weight_sex$ID
id_svl_weight_sex$SVL
id_svl_weight_sex$Weight
id_svl_weight_sex
# now iterate over the gecko data and add in the id, svl, weight, and sex
# data. both datasets are in the same order, so should be a straight iteration
for(i in gecko_data) {
i$ID <- id_svl_weight_sex$ID[index]
i$SVL <- id_svl_weight_sex$SVL[index]
i$Weight <- id_svl_weight_sex$weight[index]
i$Sex <- id_svl_weight_sex$sex[index]
index <- index + 1
}
index <- 1
# now iterate over the gecko data and add in the id, svl, weight, and sex
# data. both datasets are in the same order, so should be a straight iteration
for(i in gecko_data) {
i$ID <- id_svl_weight_sex$ID[index]
i$SVL <- id_svl_weight_sex$SVL[index]
i$Weight <- id_svl_weight_sex$weight[index]
i$Sex <- id_svl_weight_sex$sex[index]
index <- index + 1
}
gecko_data
# now iterate over the gecko data and add in the id, svl, weight, and sex
# data. both datasets are in the same order, so should be a straight iteration
for(i in gecko_data) {
i$ID <- id_svl_weight_sex$ID[index]
i$SVL <- id_svl_weight_sex$SVL[index]
i$Weight <- id_svl_weight_sex$weight[index]
i$Sex <- id_svl_weight_sex$sex[index]
out[[index]] <- i
index <- index + 1
}
out <- list()
# now iterate over the gecko data and add in the id, svl, weight, and sex
# data. both datasets are in the same order, so should be a straight iteration
for(i in gecko_data) {
i$ID <- id_svl_weight_sex$ID[index]
i$SVL <- id_svl_weight_sex$SVL[index]
i$Weight <- id_svl_weight_sex$weight[index]
i$Sex <- id_svl_weight_sex$sex[index]
out[[index]] <- i
index <- index + 1
}
out
index <- 1
out <- list()
# now iterate over the gecko data and add in the id, svl, weight, and sex
# data. both datasets are in the same order, so should be a straight iteration
for(i in gecko_data) {
i$ID <- id_svl_weight_sex$ID[index]
i$SVL <- id_svl_weight_sex$SVL[index]
i$Weight <- id_svl_weight_sex$weight[index]
i$Sex <- id_svl_weight_sex$sex[index]
out[[index]] <- i
index <- index + 1
}
out
do.call("rbind", out)
lapply(out, length)
out[[13]]
lapply(out, colnames)
gecko_data
gecko_data[[13]]
per_id[[14]]
per_id[[12]]
per_id[[13]]
geckos$ID <- as.factor(paste0(geckos$ID, geckos$SVL, geckos$weight, geckos$sex))
id_svl_weight_sex <- unique(geckos[, c(1:4)])[complete.cases(unique(geckos[, c(1:4)])), ]
id_svl_weight_sex <- id_svl_weight_sex[order(id_svl_weight_sex$ID), ]
per_id <- split(x = geckos[5:nrow(geckos), -c(1:4)], f = geckos$ID)
geckos$ID
# Load the data
geckos <- read.csv("./Szabo_2024_geckos.csv", check.names = FALSE)
geckos$ID <- as.factor(paste0(geckos$ID, geckos$SVL, geckos$weight, geckos$sex, sep = "_"))
id_svl_weight_sex <- unique(geckos[, c(1:4)])[complete.cases(unique(geckos[, c(1:4)])), ]
id_svl_weight_sex <- id_svl_weight_sex[order(id_svl_weight_sex$ID), ]
per_id <- split(x = geckos[5:nrow(geckos), -c(1:4)], f = geckos$ID)
per_id
gecko_data <- lapply(per_id, function(d) {
dd <- as.data.frame(t(d))
colnames(dd) <- dd[rownames(dd) == "Date", ]
dd <- dd[!rownames(dd) == "Date", ]
dd$Date <- gsub("\\..*", "", rownames(dd))
rownames(dd) <- NULL
dd
})
str(gecko_data)
index <- 1
out <- list()
# now iterate over the gecko data and add in the id, svl, weight, and sex
# data. both datasets are in the same order, so should be a straight iteration
for(i in gecko_data) {
i$ID <- id_svl_weight_sex$ID[index]
i$SVL <- id_svl_weight_sex$SVL[index]
i$Weight <- id_svl_weight_sex$weight[index]
i$Sex <- id_svl_weight_sex$sex[index]
out[[index]] <- i
index <- index + 1
}
lapply(out, colnames)
do.call("rbind", out)
do.call("rbind", out[[-23]])
out[23]
out[-23]
do.call("rbind", out[-23])
lapply(out, colnames)
lapply(out, function(x) {
paste(colnames(x), length(colnames(x)) collapse = ", ")
lapply(out, function(x) {
paste(colnames(x), length(colnames(x)), collapse = ", ")
})
# Load the data
geckos <- read.csv("./Szabo_2024_geckos.csv", check.names = FALSE)
geckos$ID <- as.factor(paste0(geckos$ID, geckos$SVL, geckos$weight, geckos$sex, sep = "_"))
# Load the data
geckos <- read.csv("./Szabo_2024_geckos.csv", check.names = FALSE)
geckos
lapply(per_id, function(x) {
colnames(x)
})
# Load the data
geckos <- read.csv("./Szabo_2024_geckos.csv", check.names = FALSE)
geckos$ID <- as.factor(paste(geckos$ID, geckos$SVL, geckos$weight, geckos$sex, collapse = "_"))
id_svl_weight_sex <- unique(geckos[, c(1:4)])[complete.cases(unique(geckos[, c(1:4)])), ]
id_svl_weight_sex <- id_svl_weight_sex[order(id_svl_weight_sex$ID), ]
per_id <- split(x = geckos[5:nrow(geckos), -c(1:4)], f = geckos$ID)
lapply(per_id, function(x) {
colnames(x)
})
per_id
str(per_id)
# Load the data
geckos <- read.csv("./Szabo_2024_geckos.csv", check.names = FALSE)
id_svl_weight_sex <- unique(geckos[, c(1:4)])[complete.cases(unique(geckos[, c(1:4)])), ]
id_svl_weight_sex <- id_svl_weight_sex[order(id_svl_weight_sex$ID), ]
per_id <- split(x = geckos[5:nrow(geckos), -c(1:4)], f = geckos$ID)
lapply(per_id, function(x) {
colnames(x)
})
gecko_data <- lapply(per_id, function(d) {
dd <- as.data.frame(t(d))
colnames(dd) <- dd[rownames(dd) == "Date", ]
dd <- dd[!rownames(dd) == "Date", ]
dd$Date <- gsub("\\..*", "", rownames(dd))
rownames(dd) <- NULL
dd
})
str(gecko_data)
index <- 1
out <- list()
# now iterate over the gecko data and add in the id, svl, weight, and sex
# data. both datasets are in the same order, so should be a straight iteration
for(i in gecko_data) {
i$ID <- id_svl_weight_sex$ID[index]
i$SVL <- id_svl_weight_sex$SVL[index]
i$Weight <- id_svl_weight_sex$weight[index]
i$Sex <- id_svl_weight_sex$sex[index]
out[[index]] <- i
index <- index + 1
}
lapply(out, function(x) {
paste(colnames(x), length(colnames(x)), collapse = ", ")
})
do.call("rbind", out[-13])
write.csv(x = do.call("rbind", out[-13]), file = "../gecko_data.csv", row.names = FALSE)
mp <- read.csv("./Wu_et_al_2024_Spatial_distribution_of_small_microplastics_in_the_Norwegian_Coastal_Current.csv")
mp
mp <- read.csv(
"./Wu_et_al_2024_Spatial_distribution_of_small_microplastics_in_the_Norwegian_Coastal_Current.csv",
na.strings = "-"
)
mp
mp <- read.csv(
"./Wu_et_al_2024_Spatial_distribution_of_small_microplastics_in_the_Norwegian_Coastal_Current.csv",
na.strings = "-"
)
mp
mp <- read.csv(
"./Wu_et_al_2024_Spatial_distribution_of_small_microplastics_in_the_Norwegian_Coastal_Current.csv",
na.strings = "-"
)
mp
head(mp)
mp <- read.csv(
"./Wu_et_al_2024_Spatial_distribution_of_small_microplastics_in_the_Norwegian_Coastal_Current.csv",
stringsAsFactors = TRUE
)
head(mp)
mp <- read.csv(
"./Wu_et_al_2024_Spatial_distribution_of_small_microplastics_in_the_Norwegian_Coastal_Current.csv",
na.strings = "-"
)
head(mp)
head(mp)
mp <- read.csv(
"./Wu_et_al_2024_Spatial_distribution_of_small_microplastics_in_the_Norwegian_Coastal_Current.csv",
na.strings = c("-", "-"),
)
head(mp)
